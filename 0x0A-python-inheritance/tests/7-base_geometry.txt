========================
`Base Geometry` class Tests
========================


Import module
========================
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

    Checking for module docstring:
         >>> m = __import__("7-base_geometry").__doc__
         >>> len(m) > 1
         True

    Checking for class docstring:
             >>> c = __import__("7-base_geometry").BaseGeometry.__doc__
             >>> len(c) > 1
             True

    Checking for method docstring:
         >>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
         >>> len(mod1) > 1
         True
         >>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
             >>> len(mod2) > 1
             True


Tests
========================

* Instantiate bg object of BaseGeometry class
    >>> bg = BaseGeometry()

* Call the area() method
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

* Call the area() method with 1 arguments
    >>> bg.area(5)
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given

* Call the area() method with 2 arguments
    >>> bg.area(1, 2)
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.area() takes 1 positional argument but 3 were given

* Call the integer_validator() method with valid arguments
    >>> bg.integer_validator("new_it", 1)
    >>> bg.integer_validator("width", 2)

* Call the integer_validator() method with different data types in the first as argument
    >>> bg.integer_validator(1, 2)
    >>> bg.integer_validator(['x'], 8)
    >>> bg.integer_validator({4}, 9)
    >>> bg.integer_validator(1.23, 4)
    >>> bg.integer_validator(None, 1)
    >>> bg.integer_validator({'key': 'val'}, 1)

* Calling the integer_validator() method with a string as second argument
    >>> bg.integer_validator('address', "location")
    Traceback (most recent call last):
    ...
    TypeError: address must be an integer

* Calling the integer_validator() method with `float` as second argument
    >>> bg.integer_validator('name', 1.23)
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

* Calling the integer_validator() method with negative float as second argument
    >>> bg.integer_validator('chess', -1.234)
    Traceback (most recent call last):
    ...
    TypeError: chess must be an integer

* Calling the integer_validator() method with `list` as second argument
    >>> bg.integer_validator('t_list', ["ab", 12])
    Traceback (most recent call last):
    ...
    TypeError: t_list must be an integer

* Calling the integer_validator() method with `set` as second argument
    >>> bg.integer_validator('t_set', {1, 'a', "bcd"})
    Traceback (most recent call last):
    ...
    TypeError: t_set must be an integer

* Calling the integer_validator() method with `dictionary` as second argument
    >>> bg.integer_validator('t_dict', {"name": "geo", "id": 1})
    Traceback (most recent call last):
    ...
    TypeError: t_dict must be an integer

* Calling the integer_validator() method with positive infinity as second argument
    >>> bg.integer_validator('t_pos_inf', 'inf')
    Traceback (most recent call last):
    ...
    TypeError: t_pos_inf must be an integer

* Calling the integer_validator() method with negative infinity as second argument
    >>> bg.integer_validator('t_neg_inf', '-inf')
    Traceback (most recent call last):
    ...
    TypeError: t_neg_inf must be an integer

* Calling the integer_validator() method with positive float infinity as second argument
    >>> bg.integer_validator('t_pos_inf', float('inf'))
    Traceback (most recent call last):
    ...
    TypeError: t_pos_inf must be an integer

* Calling the integer_validator() method with negative float infinity as second argument
    >>> bg.integer_validator('t_neg_inf', float('-inf'))
    Traceback (most recent call last):
    ...
    TypeError: t_neg_inf must be an integer

* Calling the integer_validator() method with a infinite float value
    >>> bg.integer_validator("fl_inf", 1e5000)
    Traceback (most recent call last):
    ...
    TypeError: fl_inf must be an integer

* Calling the integer_validator() method with NaN as second argument
    >>> bg.integer_validator("nan", float("nan"))
    Traceback (most recent call last):
    ...
    TypeError: nan must be an integer

* Calling the integer_validator() method with `tuple` as second argument
    >>> bg.integer_validator('t_tuple', ("tup", 1))
    Traceback (most recent call last):
    ...
    TypeError: t_tuple must be an integer

* Calling the integer_validator() method with `None` as second argument
    >>> bg.integer_validator('val', None)
    Traceback (most recent call last):
    ...
    TypeError: val must be an integer

* Calling the integer_validator() method with `Boolean` as second argument
    >>> bg.integer_validator('t_bool', True)
    Traceback (most recent call last):
    ...
    TypeError: t_bool must be an integer

* Calling the integer_validator() method with `object` as second argument
    >>> bg.integer_validator('obj', object)
    Traceback (most recent call last):
    ...
    TypeError: obj must be an integer

* Calling the integer_validator() method with no arguments
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

* Calling the integer_validator() method with one argument
    >>> bg.integer_validator("val")
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

* Calling the integer_validator() method with more than two arguments
    >>> bg.integer_validator("val", 1, 2)
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given

* Calling the integer_validator() method with negative integer as second argument
    >>> bg.integer_validator('val', -1)
    Traceback (most recent call last):
    ...
    ValueError: val must be greater than 0

* Calling the integer_validator() method with 0 as second argument
    >>> bg.integer_validator('val', 0)
    Traceback (most recent call last):
    ...
    ValueError: val must be greater than 0
